pipeline {
    agent any

    parameters {
        booleanParam(name: 'PUSH_DOCKER_IMAGE', defaultValue: false, description: 'Push Docker image to registry')
        booleanParam(name: 'LOCAL_DEPLOY', defaultValue: false, description: 'Deploy Docker image locally')
        booleanParam(name: 'K8S_DEPLOY', defaultValue: false, description: 'Deploy in Kubernetes Minikube')
    }

    environment {
        DOCKERHUB_CREDENTIALS= credentials('dockerhubcredentials')
        DOCKER_REGISTRY = "docker.io"
        KUBECONFIG = credentials('kubeconfigcredential')
        DOCKER_IMAGE = 'davidgallardo/nodejsapp'
        DOCKER_IMAGE_TAG = "$DOCKER_IMAGE:${BUILD_NUMBER}"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'npm install'
                echo 'Build Completed'
            }
        }

        stage('Run Test') {
            steps {
                echo 'Run Test'
                echo 'Test Completed'
            }
        }

        // stage('Login to Docker Hub') {
        //     steps{
        //         sh "echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin"
        //         echo 'Login Completed'
        //     }
        // }

        stage('Build Docker Image') {
            steps {
                // sh "docker build -t $DOCKER_IMAGE_TAG ."
                script {
                    docker.build(DOCKER_IMAGE_TAG)
                    echo "Build docker image $DOCKER_IMAGE_TAG Completed"
                }
            }
        }

        stage('Push Image to Docker Hub') {
            when {
                expression { params.PUSH_DOCKER_IMAGE }
            }
            steps{
                // sh "docker push $DOCKER_IMAGE_TAG"
                script {
                    docker.withRegistry("https://$DOCKER_REGISTRY", "$DOCKERHUB_CREDENTIALS") {
                            docker.image(DOCKER_IMAGE_TAG).push()
                        }
                    echo 'Push Image Completed'
                }
            }
        }

        stage('Local Deploy') {
            when {
                expression { params.LOCAL_DEPLOY }
            }
            steps {
                script {
                    input 'Deploy locally?'
                    def containerName = 'my-nodejs-app'
                    def containerExists = sh(script: "docker ps -a --format '{{.Names}}' | grep -q '^${containerName}\$'", returnStatus: true)

                    if (containerExists == 0) {
                        echo "Container '${containerName}' exists"
                        sh "docker rm -f '${containerName}'"
                        echo "Remove container '${containerName}'"
                    }
                    
                    sh "docker run -p 3000:3000 -d --name '${containerName}' --rm $DOCKER_IMAGE_TAG"
                    echo 'Deploy Image Completed'
                }
            }
        }

        stage('K8S Deploy') {
            when {
                expression { params.K8S_DEPLOY }
            }
            steps {
                script {
                    input 'Deploy in minikube?'
                    def deploymentYaml = 'kubernetes/node-deployment.yaml'
                    def serviceYaml = 'kubernetes/node-svc.yaml'

                    echo "Deploying resources"
                    sh "envsubst < '${deploymentYaml}' | kubectl --kubeconfig=$KUBECONFIG apply -f -"
                    sh "kubectl --kubeconfig=$KUBECONFIG apply -f '${serviceYaml}'"
                }
            }
        }
    }

    post{
        always {
            sh "docker images -q $DOCKER_IMAGE | tail -n +4 | xargs docker rmi"
            // sh 'docker logout'
        }
    }

    // post {
    //     success {
    //         echo 'Build, push, and deployment successful!'
    //     }
    //     failure {
    //         echo 'Build, push, or deployment failed!'
    //     }
    // }
}